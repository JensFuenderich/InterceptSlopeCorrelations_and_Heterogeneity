---
title: "Manuscript_Analyses"
author: "Jens H. FÃ¼nderich"
format: html
editor: visual
---

# Set Up

## Install packages

```{r}

# Library Loading
packages <- c("brms", 
              "ggplot2",
              "dplyr",
              "lme4", 
              "readr")

# check, whether library already installed or not - install and load as needed:
apply(as.matrix(packages), MARGIN = 1, FUN = function(x) {
  
  pkg_avail <- nzchar(system.file(package = x))   # check if library is installed on system
  
  if(pkg_avail){
    require(x, character.only = TRUE)             # load the library, if already installed
    
  }else{
    install.packages(x)                           # install the library, if missing
    require(x, character.only = TRUE)             # load after installation
  }
})

# install MetaPipeXUpdate from GitHub 
renv::install("JensFuenderich/MetaPipeX_Update/R_Package")

```

## Import data

```{r}

# collect paths 
paths <-  list.files(path = "individual_participant_data/", 
                    pattern = "*.csv", 
                    full.names = TRUE)

# apply read function to paths 
data_file <- lapply(paths, readr::read_csv)

## rename list objects 
# remove path to directory & level info 
names <- strsplit(
  unlist(strsplit(paths, "//"))[seq(from = 2, 
                                    to = length(paths) * 2, # length after split 
                                    by = 2)], 
  "_individual_participant_data.csv")
# rename
names(data_file) <- names

```

# Two Step Meta-Analyses

#### run the model

```{r}

MetaPipeX_Output <- MetaPipeXUpdate::full_pipeline(data = data_file, 
                                                   output_path = getwd())

```

# Select Data

#### control mean heterogeneity

```{r}

## control mean 
plot_data <- MetaPipeX_Output$lvl4_meta_analyses$Meta_Analyses %>% 
  dplyr::select(MultiLab, MASC, QEp__C_M, Tau__C_M, CoeffVar__C_M, I2__C_M)

# create df that shows which MASCs have p < 0.05 in their Q-test for CM
plot_data %>% 
  dplyr::select(MultiLab, MASC, QEp__C_M) %>% 
  dplyr::mutate(QEp__C_M < 0.025) 

# ggplot(plot_data, aes(x=CoeffVar__C_M)) + geom_histogram() + theme_minimal()

readr::write_csv(plot_data, "signficant_heterogeneity_CM.csv")

```

#### mean difference heterogeneity

```{r}

## control mean 
plot_data <- MetaPipeX_Output$lvl4_meta_analyses$Meta_Analyses %>% 
  dplyr::select(MultiLab, MASC, QEp__MD, Tau__MD, CoeffVar__MD, I2__MD)

# create df that shows which MASCs have p < 0.05 in their Q-test for CM
plot_data %>% 
  dplyr::select(MultiLab, MASC, QEp__MD) %>% 
  dplyr::mutate(QEp__MD < 0.025) 

# ggplot(plot_data, aes(x=CoeffVar__MD)) + geom_histogram() + theme_minimal()

readr::write_csv(plot_data, "signficant_heterogeneity_MD.csv")

```

#### select MASCs

```{r}

## two step meta-analyses

# full data set 
full_dataset_two_stage_MA <- MetaPipeX_Output$lvl4_meta_analyses$Meta_Analyses

# primary subset: select only sutdies with p < 0.025 heterogeneity in both variables 
primary_subset_two_stage_MA <- MetaPipeX_Output$lvl4_meta_analyses$Meta_Analyses %>% 
  dplyr::filter(QEp__C_M < 0.025 & QEp__MD < 0.025)

## ipd data sets (lists)

# full data set 
names_full <- paste(full_dataset_two_stage_MA$MultiLab, 
                    full_dataset_two_stage_MA$MASC, 
                    sep = "_")
full_dataset_IPD <- MetaPipeX_Output$lvl1_individual_participant_data$Individual_Participant_Data[names_full]

# primary subset: select only sutdies with p < 0.025 heterogeneity in both variables 
names_primary <- paste(primary_subset_two_stage_MA$MultiLab, 
                       primary_subset_two_stage_MA$MASC, 
                       sep = "_")
primary_subset_IPD <- MetaPipeX_Output$lvl1_individual_participant_data$Individual_Participant_Data[names_primary]

```

#### relative heterogeneity from two-stage MA

```{r}


data.frame(
  estimate = c("mean", "median"), 
  tau = round(c(mean(primary_subset_two_stage_MA$Tau__SMD), 
          median(primary_subset_two_stage_MA$Tau__SMD)),
          digits = 2),
  CV = round(c(mean(primary_subset_two_stage_MA$CoeffVar__SMD), 
         median(primary_subset_two_stage_MA$CoeffVar__SMD)), 
         digits = 2),
  I2 = round(c(mean(primary_subset_two_stage_MA$I2__SMD), 
         median(primary_subset_two_stage_MA$I2__SMD)), 
         digits = 2),
  H2 = round(c(mean(primary_subset_two_stage_MA$H2__SMD), 
         median(primary_subset_two_stage_MA$H2__SMD)),
         digits = 2)
  
)

```

## correlation between heterogeneity in MD & SMD

```{r}

## in the full data set 

par(mfrow=c(1,3))

plot(full_dataset_two_stage_MA$I2__MD, 
     full_dataset_two_stage_MA$I2__SMD, 
     main = round(cor(full_dataset_two_stage_MA$I2__MD,
                      full_dataset_two_stage_MA$I2__SMD), 3),
     xlab = "", 
     ylab = "")

plot(full_dataset_two_stage_MA$H2__MD, 
     full_dataset_two_stage_MA$H2__SMD, 
     main = round(cor(full_dataset_two_stage_MA$H2__MD,
                      full_dataset_two_stage_MA$H2__SMD), 3),
     xlab = "", 
     ylab = "")

plot(full_dataset_two_stage_MA$CoeffVar__MD, 
     full_dataset_two_stage_MA$CoeffVar__SMD, 
     main = round(cor(full_dataset_two_stage_MA$CoeffVar__MD,
                      full_dataset_two_stage_MA$CoeffVar__SMD), 3),
     xlab = "", 
     ylab = "")


## in the subset 

plot(primary_subset_two_stage_MA$I2__MD,
     primary_subset_two_stage_MA$I2__SMD,
     main = round(cor(primary_subset_two_stage_MA$I2__MD,
                      primary_subset_two_stage_MA$I2__SMD), 3))

plot(primary_subset_two_stage_MA$H2__MD,
     primary_subset_two_stage_MA$H2__SMD,
     main = round(cor(primary_subset_two_stage_MA$H2__MD,
                      primary_subset_two_stage_MA$H2__SMD), 3))

plot(primary_subset_two_stage_MA$CoeffVar__MD,
     primary_subset_two_stage_MA$CoeffVar__SMD,
     main = round(cor(primary_subset_two_stage_MA$CoeffVar__MD,
                      primary_subset_two_stage_MA$CoeffVar__SMD), 3))

```

# One Step Meta-Analyses

#### define functions to extract results

```{r}

# define function 
cor_CM_MD_fun <- function(model){
  summary_output <- summary(model)
  attributes(summary_output$varcor$Data_Collection_Site)$correlation[1,2]
}

# define function 
sigma_intercept_fun <- function(model){
  summary_output <- summary(model)
  attributes(summary_output$varcor$Data_Collection_Site)$stddev[1]
}

# define function 
sigma_slope_fun <- function(model){
  summary_output <- summary(model)
  attributes(summary_output$varcor$Data_Collection_Site)$stddev[2]
}

# define function 
est_intercept_fun <- function(model){
  summary_output <- summary(model)
  summary_output$coefficients[1,1]
}

# define function 
est_slope_fun <- function(model){
  summary_output <- summary(model)
  summary_output$coefficients[2,1]
}

# define function 
cor_CM_MD_fun_brms <- function(model){
  summary_output <- summary(model)
  summary_output$random$Data_Collection_Site[3,1]
}

# define function 
sigma_intercept_fun_brms <- function(model){
  summary_output <- summary(model)
  summary_output$random$Data_Collection_Site[1,1]
}

# define function 
sigma_slope_fun_brms <- function(model){
  summary_output <- summary(model)
  summary_output$random$Data_Collection_Site[2,1]
}


# define function 
est_intercept_fun_brms <- function(model){
  summary_output <- summary(model)
  summary_output$fixed[1,1]
}

# define function 
est_slope_fun_brms <- function(model){
  summary_output <- summary(model)
  summary_output$fixed[2,1]
}

```

### lmer

#### run the model

```{r}

# run the model
lmer_model_output_list <- lapply(1:length(full_dataset_IPD),
                            function(x){
                              # random intercepts & random slopes
                              lme4::lmer(DV ~ Group + (Group | Data_Collection_Site),
                                         data = full_dataset_IPD[[x]], 
                                         REML = TRUE)
                              })
# rename list objects
names(lmer_model_output_list) <- names(full_dataset_IPD)

```

#### 

#### extract results

```{r}

lmer_out_reduced <- data.frame(MASC = names(lmer_model_output_list), 
                               # apply function 
                               cor_CM_MD = unlist(lapply(1:length(lmer_model_output_list), 
                                                   function(x){
                                                     cor_CM_MD_fun(
                                                       model = lmer_model_output_list[[x]])
                                                     }
                                                   )), 
                               sigma_intercept = unlist(lapply(
                                 1:length(lmer_model_output_list), 
                                 function(x){
                                   sigma_intercept_fun(model = lmer_model_output_list[[x]])
                                   })), 
                               sigma_slope = unlist(lapply(
                                 1:length(lmer_model_output_list), 
                                 function(x){
                                   sigma_slope_fun(model = lmer_model_output_list[[x]])
                                   })), 
                               est_intercept = unlist(lapply(
                                 1:length(lmer_model_output_list), 
                                 function(x){
                                   est_intercept_fun(model = lmer_model_output_list[[x]])
                                   })), 
                               est_slope = unlist(lapply(
                                 1:length(lmer_model_output_list), 
                                 function(x){
                                   est_slope_fun(model = lmer_model_output_list[[x]])
                                   }))
                               )

# create subsets 
full_dataset_lmer_out_reduced <- lmer_out_reduced
primary_subset_lmer_out_reduced <- lmer_out_reduced[lmer_out_reduced$MASC %in% names(primary_subset_IPD),]

# display output 
full_dataset_lmer_out_reduced
primary_subset_lmer_out_reduced

```

### brms

#### run the model

```{r}

# run the model
brms_model_output_list <- lapply(1:length(full_dataset_IPD),
                            function(x){
                              # random intercepts & random slopes
                              brms::brm(
                                DV ~ Group + (Group | Data_Collection_Site),
                                data = full_dataset_IPD[[x]],
                                cores = 4
                                )
                              })
# export results 
readr::write_rds(brms_model_output_list, "brms_analyses_MultiLabs.rds")

# import results
brms_model_output_list <- readr::read_rds("brms_analyses_MultiLabs")

# rename list objects
names(brms_model_output_list) <- names(full_dataset_IPD)

```

#### extract results

```{r}

brms_out_reduced <- data.frame(MASC = names(brms_model_output_list), 
                               # apply function 
                               cor_CM_MD = unlist(lapply(
                                 1:length(brms_model_output_list), 
                                 function(x){
                                   cor_CM_MD_fun_brms(model = brms_model_output_list[[x]])
                                   })), 
                               sigma_intercept = unlist(lapply(
                                 1:length(brms_model_output_list), 
                                 function(x){
                                   sigma_intercept_fun_brms(model = brms_model_output_list[[x]])
                                   })), 
                               sigma_slope = unlist(lapply(
                                 1:length(brms_model_output_list), 
                                 function(x){
                                   sigma_slope_fun_brms(model = brms_model_output_list[[x]])
                                   })), 
                               est_intercept = unlist(lapply(
                                 1:length(brms_model_output_list), 
                                 function(x){
                                   est_intercept_fun_brms(model = brms_model_output_list[[x]])
                                   })), 
                               est_slope = unlist(lapply(
                                 1:length(brms_model_output_list), 
                                 function(x){
                                   est_slope_fun_brms(model = brms_model_output_list[[x]])
                                   }))
                               )
# create subsets 
full_dataset_brms_out_reduced <- brms_out_reduced
primary_subset_brms_out_reduced <- brms_out_reduced[brms_out_reduced$MASC %in% names(primary_subset_IPD),]


# display output 
full_dataset_brms_out_reduced
primary_subset_brms_out_reduced

```

## comparing estimates

### heterogeneity estimates (CV)

```{r}

## full data set 

# collect scatter plot data 
plot_data <- data.frame(
  one_stage = c(full_dataset_lmer_out_reduced$sigma_slope/abs(full_dataset_lmer_out_reduced$est_slope),
               full_dataset_brms_out_reduced$sigma_slope/abs(full_dataset_brms_out_reduced$est_slope)),
  method = rep(c("one_stage_lmer", "one_stage_brms"), 
               each = length(full_dataset_lmer_out_reduced$sigma_slope)), 
  two_stage_MA = rep(full_dataset_two_stage_MA$CoeffVar__MD, times = 2), 
  Est_SMD = rep(abs(full_dataset_two_stage_MA$Est__SMD), times = 2))

# create scatter plot
full_dataset_plot <- ggplot(plot_data, 
       aes(x = two_stage_MA, y = one_stage, color = method, shape = method, size = Est_SMD)) + 
  geom_point(alpha = 0.7) + 
  theme_minimal() + 
  theme(legend.position="none") +
  ggtitle("a)")


## primary subset 

# collect scatter plot data 
plot_data <- data.frame(
  one_stage = c(primary_subset_lmer_out_reduced$sigma_slope/
                  abs(primary_subset_lmer_out_reduced$est_slope),
               primary_subset_brms_out_reduced$sigma_slope/
                 abs(primary_subset_brms_out_reduced$est_slope)),
  method = rep(c("one_stage_lmer", "one_stage_brms"), 
               each = length(primary_subset_lmer_out_reduced$sigma_slope)), 
  two_stage_MA = rep(primary_subset_two_stage_MA$CoeffVar__MD, times = 2), 
  Est_SMD = rep(abs(primary_subset_two_stage_MA$Est__SMD), times = 2))

# create scatter plot 
primary_subset_plot <- ggplot(plot_data, 
       aes(x = two_stage_MA, 
           y = one_stage, 
           color = method, 
           shape = method, 
           size = Est_SMD)) + 
  geom_point(alpha = 0.7) + 
  theme_minimal() + 
  theme(legend.position="none") +
  ggtitle("b)")

gridExtra::grid.arrange(grobs = list(full_dataset_plot, 
                        primary_subset_plot), 
                        ncol = 2)

rm(plot_data)

```

### two-stage heterogeneity estimates for SMD

```{r}

data.frame(
  point_estimate = c("mean", "median"),
  tau = round(c(mean(primary_subset_two_stage_MA$Tau__SMD), 
                median(primary_subset_two_stage_MA$Tau__SMD)), 
              digits = 2),
  CV = round(c(mean(primary_subset_two_stage_MA$CoeffVar__SMD), 
                median(primary_subset_two_stage_MA$CoeffVar__SMD)), 
              digits = 2),
  I2 = round(c(mean(primary_subset_two_stage_MA$I2__SMD), 
                median(primary_subset_two_stage_MA$I2__SMD)), 
              digits = 2),
  H2 = round(c(mean(primary_subset_two_stage_MA$H2__SMD), 
                median(primary_subset_two_stage_MA$H2__SMD)), 
              digits = 2)
)

```

### effect size and heterogeneity

```{r}

effects_only <- full_dataset_two_stage_MA %>% 
  dplyr::filter(abs(Est__SMD) > 0.1)

cor_df <- data.frame(
  Subset = c("full dataset", "primary subset", "non-null"), 
  tau = c(
    round(cor(abs(full_dataset_two_stage_MA$Est__SMD), 
              full_dataset_two_stage_MA$Tau__SMD), 3),
    round(cor(abs(primary_subset_two_stage_MA$Est__SMD), 
              primary_subset_two_stage_MA$Tau__SMD), 3), 
    round(cor(abs(effects_only$Est__SMD), 
              effects_only$Tau__SMD), 3)
    ),
  CV = c(
    round(cor(abs(full_dataset_two_stage_MA$Est__SMD), 
              full_dataset_two_stage_MA$CoeffVar__SMD), 3),
    round(cor(abs(primary_subset_two_stage_MA$Est__SMD), 
              primary_subset_two_stage_MA$CoeffVar__SMD), 3), 
    round(cor(abs(effects_only$Est__SMD), effects_only$CoeffVar__SMD), 3)
  ), 
  I2 = c(
    round(cor(abs(full_dataset_two_stage_MA$Est__SMD), 
              full_dataset_two_stage_MA$I2__SMD), 3), 
    round(cor(abs(primary_subset_two_stage_MA$Est__SMD), 
              primary_subset_two_stage_MA$I2__SMD), 3), 
    round(cor(abs(effects_only$Est__SMD), 
              effects_only$I2__SMD), 3)
  ), 
  H2 = c(
    round(cor(abs(full_dataset_two_stage_MA$Est__SMD), 
              full_dataset_two_stage_MA$H2__SMD), 3), 
    round(cor(abs(primary_subset_two_stage_MA$Est__SMD), 
              primary_subset_two_stage_MA$H2__SMD), 3), 
    round(cor(abs(effects_only$Est__SMD), 
              effects_only$H2__SMD), 3)
  )
)

readr::write_csv(cor_df, "ES_and_heterogeneity.csv")

cor_df

```

### of the intercept slope correlation

for the full data set

```{r}

## correlation estimates 

# averages 

average_ISC <- data.frame(
  method = c("lmer", "brms"),  
  full_dataset_mean = c(mean(full_dataset_lmer_out_reduced$cor_CM_MD, na.rm = T), 
                        mean(full_dataset_brms_out_reduced$cor_CM_MD)), 
  full_dataset_median =  c(median(full_dataset_lmer_out_reduced$cor_CM_MD, na.rm = T), 
                        median(full_dataset_brms_out_reduced$cor_CM_MD)), 
  primary_subset_mean = c(mean(primary_subset_lmer_out_reduced$cor_CM_MD, na.rm = T), 
                          mean(primary_subset_brms_out_reduced$cor_CM_MD)),
  primary_subset_median = c(median(primary_subset_lmer_out_reduced$cor_CM_MD, na.rm = T), 
                          median(primary_subset_brms_out_reduced$cor_CM_MD))
)

readr::write_csv(average_ISC, "average_ISC.csv")

average_ISC

# lmer & brms 

plot_data <- data.frame(lmer = full_dataset_lmer_out_reduced$cor_CM_MD, 
                        brms = full_dataset_brms_out_reduced$cor_CM_MD,
                        Est_SMD = abs(full_dataset_two_stage_MA$Est__SMD))

ggplot(plot_data, 
       aes(x = lmer, y = brms, size = Est_SMD)) +
  geom_point() + 
  theme_minimal() + 
  ggtitle(round(cor(plot_data$lmer, plot_data$brms, use = "na.or.complete"), 3))

rm(plot_data)

```

# 

### r\^2 & (r\^2 - 1) analyses

lmer & brms

full dataset

```{r}

# collect bar chart data 
plot_data <- data.frame(estimate = c(full_dataset_lmer_out_reduced$cor_CM_MD^2, 
                                     full_dataset_brms_out_reduced$cor_CM_MD^2), 
                        method = rep(c("one_stage_lmer", "one_stage_brms"), 
                                     each = nrow(full_dataset_brms_out_reduced)), 
                        CV = c(full_dataset_lmer_out_reduced$sigma_slope / 
                                 abs(full_dataset_lmer_out_reduced$est_slope), 
                                full_dataset_brms_out_reduced$sigma_slope /
                                 abs(full_dataset_brms_out_reduced$est_slope)), 
                        CV_two_stage_MA = rep(full_dataset_two_stage_MA$CoeffVar__MD, times = 2),
                        MASC = rep(full_dataset_two_stage_MA$MASC, times = 2)
                        )

lmer_data <- plot_data %>% dplyr::filter(method == "one_stage_lmer")

lmer_data$estimate_limit <- rep(1, times = nrow(lmer_data))

# create histogram 
lmer_plot <- ggplot(lmer_data, 
       aes(x = MASC,
           # y = (1 - estimate), 
           fill = method)) +
  geom_bar(aes(y = lmer_data$estimate_limit), 
           stat = "identity", 
           fill = "#F8766D", 
           alpha = 0.9) + 
  geom_bar(aes(y = lmer_data$estimate), 
           stat = "identity", 
           fill = "#00BE67",
           alpha = 0.9) + 
  theme(# axis.title.x = element_blank(), 
        axis.title.y = element_blank(), 
        # axis.text.y = element_blank(), 
        # axis.ticks.y = element_blank(), 
        legend.position = "none") + 
  ylab( "lmer: r^2" ) +
  # scale_y_reverse() +
  # ylim(c(1, 0)) + 
  ylim(c(0, 1)) + 
  coord_flip() + 
  geom_hline(yintercept = median(lmer_data$estimate, na.rm = TRUE), linetype = 3) + 
  geom_hline(yintercept = mean(lmer_data$estimate, na.rm = TRUE)) + 
  theme_minimal()


brms_data <- plot_data %>% dplyr::filter(method == "one_stage_brms")

brms_data$estimate_limit <- rep(1, times = nrow(brms_data))

# create histogram 
brms_plot <- ggplot(brms_data, 
       aes(x = MASC,
           # y = (1 - estimate), 
           fill = method)) +
  geom_bar(aes(y = brms_data$estimate_limit), 
           stat = "identity", 
           fill = "#F8766D", 
           alpha = 0.9) + 
  geom_bar(aes(y = brms_data$estimate), 
           stat = "identity", 
           fill = "#00BE67",
           alpha = 0.9) + 
  theme(# axis.title.x = element_blank(), 
        axis.title.y = element_blank(), 
        # axis.text.y = element_blank(), 
        # axis.ticks.y = element_blank(), 
        legend.position = "none") + 
  ylab( "brms: r^2" ) +
  # scale_y_reverse() +
  # ylim(c(1, 0)) + 
  ylim(c(0, 1)) + 
  coord_flip() + 
  geom_hline(yintercept = median(brms_data$estimate, na.rm = TRUE), 
             linetype = 3) + 
  geom_hline(yintercept = mean(brms_data$estimate, na.rm = TRUE)) + 
  theme_minimal()

gridExtra::grid.arrange(lmer_plot, brms_plot, ncol = 1)

# rm(plot_data)

```

lmer & brms

primary subset

```{r}

# collect histogram data 
plot_data <- data.frame(estimate = c(primary_subset_lmer_out_reduced$cor_CM_MD^2, 
                                     primary_subset_brms_out_reduced$cor_CM_MD^2), 
                        method = rep(c("one_stage_lmer", "one_stage_brms"), 
                                     each = nrow(primary_subset_lmer_out_reduced)), 
                        CV = c(primary_subset_lmer_out_reduced$sigma_slope / 
                                 abs(primary_subset_lmer_out_reduced$est_slope), 
                                primary_subset_brms_out_reduced$sigma_slope /
                                 abs(primary_subset_brms_out_reduced$est_slope)), 
                        CV_two_stage_MA = rep(primary_subset_two_stage_MA$CoeffVar__MD, times = 2),
                        MASC = rep(primary_subset_two_stage_MA$MASC, times = 2), 
                        Est_SMD = primary_subset_two_stage_MA$Est__SMD
                        )

lmer_data <- plot_data %>% dplyr::filter(method == "one_stage_lmer")

lmer_data$estimate_limit <- rep(1, times = nrow(lmer_data))

# create histogram 
lmer_plot <- ggplot(lmer_data, 
       aes(x = MASC,
           # y = (1 - estimate), 
           fill = method)) +
  geom_bar(aes(y = lmer_data$estimate_limit), 
           stat = "identity", 
           fill = "#F8766D", 
           alpha = 0.9) + 
  geom_bar(aes(y = lmer_data$estimate), 
           stat = "identity", 
           fill = "#00BE67",
           alpha = 0.9) + 
  theme(# axis.title.x = element_blank(), 
        axis.title.y = element_blank(), 
        # axis.text.y = element_blank(), 
        # axis.ticks.y = element_blank(), 
        legend.position = "none") + 
  ylab( "lmer: r^2" ) +
  # scale_y_reverse() +
  # ylim(c(1, 0)) + 
  ylim(c(0, 1)) + 
  coord_flip() + 
  geom_hline(yintercept = median(lmer_data$estimate, na.rm = TRUE), linetype = 3) + 
  geom_hline(yintercept = mean(lmer_data$estimate, na.rm = TRUE)) + 
  theme_minimal()



brms_data <- plot_data %>% dplyr::filter(method == "one_stage_brms")

brms_data$estimate_limit <- rep(1, times = nrow(brms_data))

# create histogram 
brms_plot <- ggplot(brms_data, 
       aes(x = MASC,
           # y = (1 - estimate), 
           fill = method)) +
  geom_bar(aes(y = brms_data$estimate_limit), 
           stat = "identity", 
           fill = "#F8766D", 
           alpha = 0.9) + 
  geom_bar(aes(y = brms_data$estimate), 
           stat = "identity", 
           fill = "#00BE67",
           alpha = 0.9) + 
  theme(# axis.title.x = element_blank(), 
        axis.title.y = element_blank(), 
        # axis.text.y = element_blank(), 
        # axis.ticks.y = element_blank(), 
        legend.position = "none") + 
  ylab( "brms: r^2" ) +
  # scale_y_reverse() +
  # ylim(c(1, 0)) + 
  ylim(c(0, 1)) + 
  coord_flip() + 
  geom_hline(yintercept = median(brms_data$estimate, na.rm = TRUE), 
             linetype = 3) + 
  geom_hline(yintercept = mean(brms_data$estimate, na.rm = TRUE)) + 
  theme_minimal()

gridExtra::grid.arrange(lmer_plot, brms_plot, ncol = 1)

# rm(plot_data)

```

### CM_MD scatter plots

```{r}

# run the calculations per brms 
brms_CM_TM_per_MASC_fun <- function(brms_MASC_name){
  
  # select list object with brms data
  single_brms_output <- as.data.frame(
    brms_model_output_list[[brms_MASC_name]]
    )

  # rename columns
  names(single_brms_output) <- gsub("\\[|\\]", "", 
                                  stringr::str_remove(names(single_brms_output), 
                                                      "r_Data_Collection_Site"))
  
  # collect names of data collection sites 
  names_split <- unlist(stringr::str_split(brms_MASC_name, 
                                         pattern = "_", 
                                         n  = 2))

  if (stringr::str_detect(names_split[2], pattern = "_") & 
      !stringr::str_detect(names_split[2], pattern = "Jacowitz") & 
      !stringr::str_detect(names_split[2], pattern = "Oppenheimer") & 
      !stringr::str_detect(names_split[2], pattern = "CR")) {
    # names of some IPD data sets (all with an extra underscore) produces an issue otherwise
    # I should fix that in the DRIPHT Repository
    MASC_name <- stringr::str_split(names_split[2], pattern = "_")[[1]][2]
    
  } else {
    
    MASC_name <- names_split[2]
    
  }
  
  data_collection_site_names <- as.vector(unlist(
  MetaPipeX_Output$lvl5_meta_pipe_x$MetaPipeX_data %>% 
    dplyr::filter(MASC == MASC_name) %>% 
    dplyr::select(Data_Collection_Site)))
  
  # create helper function
  calculate_CM_and_TM <- function(data_collection_site_name, x){
  
  # fixed intercept 
  b_0 <- mean(single_brms_output$b_Intercept)
  
  # random intercept
  u_0i <- mean(
    single_brms_output[,stringr::str_equal(
      names(single_brms_output), 
      stringr::str_c(data_collection_site_name, ",", "Intercept", 
                     sep = ""))]
    )
  
  # fixed slope 
  b_1 <- mean(single_brms_output$b_Group)
  
  # random slope 
  u_1i <- mean(
    single_brms_output[,stringr::str_equal(
      names(single_brms_output), 
      stringr::str_c(data_collection_site_name, ",", "Group", 
                     sep = ""))]
    )
  
  x_ij <- x
  
  b_0 + b_1 * x_ij + u_0i + u_1i * x_ij
  
  }
  
  # apply helper 
  data.frame(
    MASC = rep(MASC_name, times = length(data_collection_site_names)),
    Data_Collection_Site = data_collection_site_names, 
    CM = unlist(lapply(data_collection_site_names, 
                       calculate_CM_and_TM, 
                       x = 0)), 
    TM = unlist(lapply(data_collection_site_names, 
                       calculate_CM_and_TM, 
                       x = 1))
    )
  
  }

brms_CM_TM_list <- lapply(names(brms_model_output_list), brms_CM_TM_per_MASC_fun)
names(brms_CM_TM_list) <- names(brms_model_output_list)

```

#### brms & two-stage

```{r}

## model: 
## b_0 + b_1 * x_ij + u_0i + u_1i * x_ij 

names_helper <- data.frame(
  MetaPipeX = unique(MetaPipeX_Output$lvl3_merged_site_summaries$Merged_Site_Summaries$MASC),
  brms = names(brms_CM_TM_list)
)
# names of some IPD data sets (all with an extra underscore) produces an issue otherwise
# I should fix that in the DRIPHT Repository
names_helper[2,"MetaPipeX"] <- "Carter"
names_helper[3,"MetaPipeX"] <- "Carter_CR"
names_helper[21,"MetaPipeX"] <- "Huang"
names_helper[22,"MetaPipeX"] <- "Huang_CR"


plot_CM_TM_fun <- function(name){
  
  name_MetaPipeX <- unlist(
    names_helper %>% 
      dplyr::filter(brms == name) %>% 
      dplyr::select(MetaPipeX))
  
  C_M <- MetaPipeX_Output$lvl3_merged_site_summaries$Merged_Site_Summaries %>% 
    dplyr::filter(MASC == name_MetaPipeX) %>% 
    dplyr::select(C_M)
  
  MD <- MetaPipeX_Output$lvl3_merged_site_summaries$Merged_Site_Summaries %>% 
    dplyr::filter(MASC == name_MetaPipeX) %>% 
    dplyr::select(MD)
  
  plot_data <- data.frame(
    Y = unlist(c(brms_CM_TM_list[[name]]$TM - brms_CM_TM_list[[name]]$CM, MD)),  
    X =  unlist(c(brms_CM_TM_list[[name]]$CM, C_M)), 
    brms = rep(c(1,0), times = length(brms_CM_TM_list[[name]]$CM) * 2), 
    site = rep(brms_CM_TM_list[[name]]$Data_Collection_Site, times = 2)
  )
  
  ggplot(plot_data, aes(x = X, y = Y, color = as.factor(brms))) +
    geom_point() + 
    theme(
      axis.title.x = element_blank(),
      axis.title.y = element_blank(),
      axis.text.y = element_blank(),
      axis.text.x = element_blank(),
      axis.ticks.y = element_blank(),
      axis.ticks.x = element_blank(), 
      legend.position = "none"
      ) +
        ggtitle(label = round(brms_out_reduced[
              brms_out_reduced$MASC == name,"cor_CM_MD"],
              3))
  
}


plots <- lapply(names(brms_CM_TM_list), 
       plot_CM_TM_fun)

# gridExtra::grid.arrange(grobs = plots, nrow = 7, ncol = 7)


```

#### two-stage

```{r}

## model: 
## b_0 + b_1 * x_ij + u_0i + u_1i * x_ij 

names_helper <- data.frame(
  MetaPipeX = unique(MetaPipeX_Output$lvl3_merged_site_summaries$Merged_Site_Summaries$MASC),
  brms = names(brms_CM_TM_list)
)
# names of some IPD data sets (all with an extra underscore) produces an issue otherwise
# I should fix that in the DRIPHT Repository
names_helper[2,"MetaPipeX"] <- "Carter"
names_helper[3,"MetaPipeX"] <- "Carter_CR"
names_helper[21,"MetaPipeX"] <- "Huang"
names_helper[22,"MetaPipeX"] <- "Huang_CR"


plot_CM_TM_fun <- function(name){
  
  name_MetaPipeX <- unlist(
    names_helper %>% 
      dplyr::filter(brms == name) %>% 
      dplyr::select(MetaPipeX))
  
  C_M <- MetaPipeX_Output$lvl3_merged_site_summaries$Merged_Site_Summaries %>% 
    dplyr::filter(MASC == name_MetaPipeX) %>% 
    dplyr::select(C_M)
  
  MD <- MetaPipeX_Output$lvl3_merged_site_summaries$Merged_Site_Summaries %>% 
    dplyr::filter(MASC == name_MetaPipeX) %>% 
    dplyr::select(MD)
  
  plot_data <- data.frame(
    Y = unlist(MD),  
    X =  unlist(C_M), 
    site = brms_CM_TM_list[[name]]$Data_Collection_Site
  )
  
  if (name_MetaPipeX %in% primary_subset_two_stage_MA$MASC) {
    
    ggplot(plot_data, aes(x = X, y = Y)) +
    geom_point() + 
    theme(
      axis.title.x = element_blank(),
      axis.title.y = element_blank(),
      axis.text.y = element_blank(),
      axis.text.x = element_blank(),
      axis.ticks.y = element_blank(),
      axis.ticks.x = element_blank(), 
      legend.position = "none"
      ) + 
    ggtitle(label = round(
          cor(plot_data$X, plot_data$Y, use = "complete.obs"),
          digits = 3))
    
  } else {
    
    ggplot(plot_data, aes(x = X, y = Y)) +
    geom_point(aes(color = "lightblue")) + 
    theme(
      axis.title.x = element_blank(),
      axis.title.y = element_blank(),
      axis.text.y = element_blank(),
      axis.text.x = element_blank(),
      axis.ticks.y = element_blank(),
      axis.ticks.x = element_blank(), 
      legend.position = "none"
      ) + 
    ggtitle(label = round(
          cor(plot_data$X, plot_data$Y, use = "complete.obs"),
          digits = 3))
    
  }
  
}

plots <- lapply(names(brms_CM_TM_list), 
       plot_CM_TM_fun)

# gridExtra::grid.arrange(grobs = plots, nrow = 7, ncol = 7)

```

#### brms

```{r}

## model: 
## b_0 + b_1 * x_ij + u_0i + u_1i * x_ij 

plot_CM_TM_fun <- function(name){
  
  plot_data <- data.frame(
    Y = brms_CM_TM_list[[name]]$TM - brms_CM_TM_list[[name]]$CM,  
    X =  brms_CM_TM_list[[name]]$CM, 
    site = brms_CM_TM_list[[name]]$Data_Collection_Site
  )
  
   if (name %in% primary_subset_brms_out_reduced$MASC) {
     
     ggplot(plot_data, aes(x = X, y = Y)) +
    geom_point() + 
    theme(
      axis.title.x = element_blank(),
      axis.title.y = element_blank(),
      axis.text.y = element_blank(),
      axis.text.x = element_blank(),
      axis.ticks.y = element_blank(),
      axis.ticks.x = element_blank(), 
      legend.position = "none"
      ) + 
        ggtitle(label = round(brms_out_reduced[
              brms_out_reduced$MASC == name,"cor_CM_MD"],
              3))
     
   } else {
     
     ggplot(plot_data, aes(x = X, y = Y)) +
    geom_point(aes(color = "lightblue")) + 
    theme(
      axis.title.x = element_blank(),
      axis.title.y = element_blank(),
      axis.text.y = element_blank(),
      axis.text.x = element_blank(),
      axis.ticks.y = element_blank(),
      axis.ticks.x = element_blank(), 
      legend.position = "none"
      ) + 
        ggtitle(label = round(brms_out_reduced[
              brms_out_reduced$MASC == name,"cor_CM_MD"],
              3))
     
   }
  
}


plots <- lapply(names(brms_CM_TM_list), 
       plot_CM_TM_fun)

# gridExtra::grid.arrange(grobs = plots, nrow = 7, ncol = 7)


```

# Intercept Slope Correlation & Heterogeneity

### lmer

#### x: ISC

#### y: heterogeneity in MD

```{r}

plot_data <- data.frame(
  cor_lmer = full_dataset_lmer_out_reduced$cor_CM_MD, 
  CV_slope_lmer = full_dataset_lmer_out_reduced$sigma_slope / 
    abs(full_dataset_lmer_out_reduced$est_slope), 
  CV_MD = full_dataset_two_stage_MA$CoeffVar__MD, 
  H2_MD = full_dataset_two_stage_MA$H2__MD, 
  I2_MD = full_dataset_two_stage_MA$I2__MD, 
  Est_SMD = abs(full_dataset_two_stage_MA$Est__SMD))

# CV_slope_lmer
correlation <- round(cor(plot_data$cor_lmer,
                    plot_data$CV_slope_lmer,
                    use = "na.or.complete"), 3)

CV_one_stage <- CV_lmer_plot <- plot_data %>% 
  ggplot(., 
       aes(x = cor_lmer, y = CV_slope_lmer, size = Est_SMD, color = Est_SMD)) +
  geom_point() + 
  theme_minimal() + 
  ggtitle(correlation)

# CV_MD
correlation <- round(cor(plot_data$cor_lmer,
                    plot_data$CV_MD,
                    use = "na.or.complete"), 3)

CV_two_stage <- ggplot(plot_data, 
       aes(x = cor_lmer, y = CV_MD, size = Est_SMD, color = Est_SMD)) +
  geom_point() + 
  theme_minimal() + 
  ggtitle(correlation)

# H2_MD
correlation <- round(cor(plot_data$cor_lmer,
                    plot_data$H2_MD,
                    use = "na.or.complete"), 3)

H2_two_stage <- ggplot(plot_data, 
       aes(x = cor_lmer, y = H2_MD, size = Est_SMD, color = Est_SMD)) +
  geom_point() + 
  theme_minimal() + 
  ggtitle(correlation)

# I2_MD
correlation <- round(cor(plot_data$cor_lmer,
                    plot_data$I2_MD,
                    use = "na.or.complete"), 3)

I2_two_stage <- ggplot(plot_data, 
       aes(x = cor_lmer, y = I2_MD, size = Est_SMD, color = Est_SMD)) +
  geom_point() + 
  theme_minimal() + 
  ggtitle(correlation)

gridExtra::grid.arrange(grobs = list(CV_one_stage, CV_two_stage), nrow = 1, ncol = 2)
gridExtra::grid.arrange(grobs = list(H2_two_stage, I2_two_stage), nrow = 1, ncol = 2)


rm(plot_data, correlation)

```

### brms

#### x: ISC

#### y: heterogeneity in MD

```{r}


plot_data <- data.frame(
  cor_brms = full_dataset_brms_out_reduced$cor_CM_MD, 
  sigma_slope_brms = full_dataset_brms_out_reduced$sigma_slope,
  CV_slope_brms = full_dataset_brms_out_reduced$sigma_slope / 
    abs(full_dataset_brms_out_reduced$est_slope), 
  CV_MD = full_dataset_two_stage_MA$CoeffVar__MD, 
  H2_MD = full_dataset_two_stage_MA$H2__MD, 
  I2_MD = full_dataset_two_stage_MA$I2__MD, 
  Est_SMD = abs(full_dataset_two_stage_MA$Est__SMD))

# CV_slope_brms
correlation <- round(cor(plot_data$cor_brms,
                    plot_data$CV_slope_brms,
                    use = "na.or.complete"), 3)

CV_one_stage <- plot_data %>% 
  ggplot(., 
       aes(x = cor_brms, y = CV_slope_brms, size = Est_SMD, color = Est_SMD)) +
  geom_point() + 
  theme_minimal() + 
  ggtitle(correlation)

# CV_MD
correlation <- round(cor(plot_data$cor_brms,
                    plot_data$CV_MD,
                    use = "na.or.complete"), 3)

CV_two_stage <- ggplot(plot_data, 
       aes(x = cor_brms, y = CV_MD, size = Est_SMD, color = Est_SMD)) +
  geom_point() + 
  theme_minimal() + 
  ggtitle(correlation)

# H2_MD
correlation <- round(cor(plot_data$cor_brms,
                    plot_data$H2_MD,
                    use = "na.or.complete"), 3)

H2_two_stage <- ggplot(plot_data, 
       aes(x = cor_brms, y = H2_MD, size = Est_SMD, color = Est_SMD)) +
  geom_point() + 
  theme_minimal() + 
  ggtitle(correlation)

# I2_MD
correlation <- round(cor(plot_data$cor_brms,
                    plot_data$I2_MD,
                    use = "na.or.complete"), 3)

I2_two_stage <- ggplot(plot_data, 
       aes(x = cor_brms, y = I2_MD, size = Est_SMD, color = Est_SMD)) +
  geom_point() + 
  theme_minimal() + 
  ggtitle(correlation)


gridExtra::grid.arrange(grobs = list(CV_one_stage, CV_two_stage), nrow = 1, ncol = 2)
gridExtra::grid.arrange(grobs = list(H2_two_stage, I2_two_stage), nrow = 1, ncol = 2)


rm(plot_data, correlation)

```

#### 

#### Effect Line Plots

```{r}

## model: 
## b_0 + b_1 * x_ij + u_0i + u_1i * x_ij 

plot_site_effects_fun <- function(name){
  plot_data <- data.frame(
    Y = c(brms_CM_TM_list[[name]]$CM, brms_CM_TM_list[[name]]$TM), 
    X = rep(c(0,1), each = length(brms_CM_TM_list[[name]]$CM)), 
    site = rep(brms_CM_TM_list[[name]]$Data_Collection_Site, times = 2)
  )
  
  plot_data <- na.omit(plot_data)
  
  ggplot(plot_data, aes(x = X, y = Y, group = site)) +
    geom_point() + 
    geom_line() + 
    theme_minimal() + 
    ggtitle(label = name, 
            subtitle = round(brms_out_reduced[
                                        brms_out_reduced$MASC == name,"cor_CM_MD"], 
                                        3)) 
  
}

lapply(names(brms_CM_TM_list), 
       plot_site_effects_fun)

```

#### 

### 
